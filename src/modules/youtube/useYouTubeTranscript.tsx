import * as React from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiAsync } from '~/common/util/trpc.client';

export interface YTVideoTranscript {
  title: string;
  transcript: string;
  thumbnailUrl: string;
}

// Fallback function to fetch auto-generated captions
async function fetchAutoGeneratedTranscript(videoId: string): Promise<string | null> {
  try {
    const response = await apiAsync.youtube.getAutoGeneratedTranscript.query({ videoId });
    return response.transcript || null;
  } catch (error) {
    console.error('Error fetching auto-generated transcript:', error);
    return null;
  }
}

export async function youTubeGetVideoData(videoId: string): Promise<YTVideoTranscript> {
  try {
    const response = await apiAsync.youtube.getTranscript.query({ videoId });
    if (response.transcript) {
      return {
        title: response.videoTitle,
        transcript: response.transcript,
        thumbnailUrl: response.thumbnailUrl,
      };
    }

    // Fallback to auto-generated captions
    console.warn('Standard transcript not found. Attempting to fetch auto-generated captions...');
    const autoTranscript = await fetchAutoGeneratedTranscript(videoId);
    if (autoTranscript) {
      return {
        title: response.videoTitle || 'Unknown Title',
        transcript: autoTranscript,
        thumbnailUrl: response.thumbnailUrl,
      };
    }

    throw new Error('No transcript available, including auto-generated.');
  } catch (error) {
    console.error('Error fetching video data:', error);
    throw error;
  }
}

export function useYouTubeTranscript(
  videoID: string | null,
  onNewTranscript: (transcript: YTVideoTranscript) => void
) {
  const { data, isFetching, isError, error } = useQuery({
    enabled: !!videoID,
    queryKey: ['transcript', videoID],
    queryFn: async () => youTubeGetVideoData(videoID!),
    staleTime: Infinity,
  });

  React.useEffect(() => {
    if (data) {
      onNewTranscript(data);
    }
  }, [data, onNewTranscript]);

  return {
    transcript: data,
    isFetching,
    isError,
    error,
  };
}
